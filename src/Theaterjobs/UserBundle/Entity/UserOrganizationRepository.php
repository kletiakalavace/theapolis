<?php

namespace Theaterjobs\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Theaterjobs\InserateBundle\Entity\Organization;

/**
 * UserActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserOrganizationRepository extends EntityRepository
{

    public function findUserOrga($organization)
    {
        $usersOrgaQb = $this->createQueryBuilder('u');
        $orgaUsers = $usersOrgaQb->select('orgaUsers')
            ->from('TheaterjobsUserBundle:User', 'orgaUsers')
            ->innerJoin('orgaUsers.userOrganizations', 'organizations')
            ->where('organizations.organization = :orga')
            ->andWhere('organizations.grantedAt IS NOT NULL')
            ->setParameters(array('orga' => $organization))
            ->getQuery()->getResult();
        return $orgaUsers;
    }


    /**
     * Find all users of an userOrganization entity exept $ids param
     *
     * @param $orgaId
     * @param $em
     * @param array $ids
     * @return mixed
     */
    public function findAllUsers($orgaId, $em, $ids = [])
    {
        $qb = $em->createQueryBuilder();
        $qb->select('users')
            ->from('TheaterjobsUserBundle:User', 'users')
            ->innerJoin('users.userOrganizations', 'u')
            ->innerJoin('u.organization', 'o')
            ->where('u.grantedAt IS NOT NULL')
            ->andWhere('o.id = :organization')
            ->andwhere('u.revokedAt IS NULL');

        if (count($ids) > 0) {
            $qb->andWhere('users.id not in (:ids)')->setParameters([
                'organization' => $orgaId,
                'ids' => $ids
            ]);
        } else {
            $qb->setParameters(['organization' => $orgaId]);
        }
        $users = $qb->getQuery()->getResult();
        return $users;
    }
 /**
     * Find all users of an userOrganization entity exept $ids param
     *
     * @param $orgaId
     * @return mixed
     */
    public function countActiveMembers($orgaId)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('count(u)')
            ->innerJoin('u.organization', 'o')
            ->where('u.grantedAt IS NOT NULL')
            ->andWhere('o.id = :organization')
            ->andwhere('u.revokedAt IS NULL')
            ->setParameters(['organization' => $orgaId]);

        try {
            return $qb->getQuery()->getSingleScalarResult();
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get user organizations query.
     * @param User $user
     * @param $em
     * @return mixed
     */
    public function getUserOrganizations(User $user)
    {
        $qb = $this->createQueryBuilder('uo');

        $qb->where('uo.grantedAt IS NOT NULL')
            ->andWhere('uo.revokedAt IS NULL')
            ->andWhere('uo.user= :user')
            ->setParameter('user', $user);

        return $qb->getQuery()->getResult();
    }

    /**
     * Find UserOrganization by slug and id
     *
     * @param $orgaSlug
     * @param $userId
     * @return array
     */
    public function findByUserOrga($orgaSlug, $userId)
    {
        $qb = $this->createQueryBuilder('uo');
        $result = $qb->join('uo.user', 'uoUser')
            ->join('uo.organization', 'uoOrganization')
            ->where('uoUser.id = :userID')
            ->andWhere('uoOrganization.slug = :orgaSlug')
            ->setParameters(['userID' => $userId, 'orgaSlug' => $orgaSlug])
            ->getQuery()->getResult();
        return $result ? $result[0] : null;
    }

}
