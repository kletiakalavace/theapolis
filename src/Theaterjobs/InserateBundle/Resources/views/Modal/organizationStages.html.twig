{% import '::macro.html.twig' as m %}
<div class="modal-body movebottom" id="organizationStage">
    <div class="container">
        <div class="row">
            <div class="col-md-8 col-md-push-2">
                {{ form_start(edit_form) }}
                <div class="row">
                    <h2> {{ 'organization.edit.mainTitle.editOrganizationStages'| trans }}</h2>
                    <div class="row">
                        {{ form_row(edit_form._token) }}
                        {{ form_label(edit_form.organizationStage) }}
                        <ul class="stage"
                            data-prototype='{{ form_widget(edit_form.organizationStage.vars.prototype) }}'>
                            {% for organizationStage in edit_form.organizationStage %}
                                <li>
                                    {{ form_row(organizationStage.stageTitle) }}
                                    {{ form_row(organizationStage.stageSeats) }}
                                    {{ form_row(organizationStage.hubStages) }}
                                    {{ form_row(organizationStage.stageWidth) }}
                                    {{ form_row(organizationStage.stageDepth) }}
                                    {{ form_row(organizationStage.portalWidth) }}
                                    {{ form_row(organizationStage.portalDepth) }}
                                    {{ form_row(organizationStage.tags_helper,{'attr' : {'multiple': 'true', 'value' : tag_titles[edit_form.vars.value.organizationStage[loop.index - 1].id] } }) }}
                                    {{ form_row(organizationStage.moreInfo) }}
                                </li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
                <br/>
                <div style="text-align: center">
                    <button type="button" class="close-footer" data-dismiss="modal"
                            aria-label="Close">{{ 'footer.modal.closeModal'| trans }}</button>
                    <div style="display: inline-block">{{ form_row(edit_form.submit, { 'attr': { 'class': 'btn btn-inverse-primary center' } }) }}</div>
                </div>
                {{ form_end(edit_form, {'render_rest': false}) }}

            </div>
            {{ m.error }}
        </div>
    </div>
</div>
<script>
    var inputTerm;
    $.validator.addClassRules(
        "stageWidth", {
            customMeters: true
        }
    );
    $.validator.addClassRules(
        "stageDepth", {
            customMeters: true
        }
    );
    $.validator.addClassRules(
        "portalWidth", {
            customMeters: true
        }
    );
    $.validator.addClassRules(
        "portalDepth", {
            customMeters: true
        }
    );

    var stageCount = '{{ edit_form.organizationStage|length }}';
    var i = 0;

    $('.checkbox label').append('<span class="faux-checkbox"></span>');
    var $addStageLink = $('<a href="#" class="row add_stage_link">' +
        '<svg class="icon-svg icon-svg-inverse icon-inline" width="20" height="20">' +
        '<use xlink:href="{{ asset('bundles/theaterjobsmain/images/icon-sprite.svg#icon-new') }}"></use>' +
        '</svg> {{ "organization.edit.addNewStage"| trans }}</a>');
    var $newLinkLiStage = $('<li class="col-md-12"></li>').append($addStageLink);

    function addTagForm($collectionHolder, $newLinkLi) {
        // Get the data-prototype explained earlier
        var prototype = $collectionHolder.data('prototype');
        // get the new index
        var index = $collectionHolder.data('index');
        // Replace '__name__' in the prototype's HTML to
        // instead be a number based on how many items we have
        var newForm = prototype.replace(/__name__/g, index);
        // increase the index with one for the next item
        $collectionHolder.data('index', index + 1);
        // Display the form in the page in an li, before the "Add a tag" link li
        var $newFormLi = $('<li class="add-list"></li>').append(newForm);
        addTagFormDeleteLink($newFormLi, i);
        $newLinkLi.before($newFormLi);
        $newFormLi.find('.checkbox label').append('<span class="faux-checkbox"></span>');
        return index;
    }

    function addTagFormDeleteLink($tagFormLi, index) {
        var $removeFormA = $('<div class="col-md-12 stage-modal">' +
            '<h3>{{ 'organization.edit.stage.label.stage'| trans }} ' + index + '</h3><a href="#" class="pull-right">' +
            '<svg class="icon-svg icon-svg-inverse icon-inline" width="14" height="14">' +
            '<use xlink:href="{{ asset('bundles/theaterjobsmain/images/icon-sprite.svg#icon-small-close') }}"></use>' +
            ' </svg>{{ "link.remove" | trans }}</a></div>');
        $tagFormLi.prepend($removeFormA);
        $removeFormA.find('a').on('click', function (e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();
            bootbox.confirm({
                message: trans('bootbox.wantToDelete', locale),
                buttons: {
                    confirm: {
                        label: trans('bootbox.button.yes', locale),
                        className: 'btn-success'
                    },
                    cancel: {
                        label: trans('bootbox.button.no', locale),
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        // remove the li for the tag form
                        $tagFormLi.remove();
                    }
                }
            });
        });
    }

    function validateStageTitle() {
        var returnVal = true;
        $('.stage >li.add-list').each(function () {
            var stageTitle = $(this).find($('input.stageTitle'));
            if (!stageTitle.val()) {
                toolTipError('This field is required.', stageTitle);
                returnVal = false;

                $('.text-danger').removeClass('hidden');


            }
            else {
                stageTitle.closest('.has-error').removeClass('has-error');
                $('.text-danger').addClass('hidden');
                if (typeof stageTitle.attr('aria-describedby') !== "undefined") {
                    stageTitle.tooltip('destroy');
                    stageTitle.removeAttr('aria-describedby');
                }
                returnVal = true;
            }

        });
        //console.log(returnVal);
        return returnVal;
    }

    // Get the ul that holds the collection of tags
    $collectionHolderStage = $('ul.stage');
    $collectionHolderStage.find('li').each(function () {
        i++;
        addTagFormDeleteLink($(this), i);
    });
    // add the "add a tag" anchor and li to the tags ul
    $collectionHolderStage.append($newLinkLiStage);
    // count the current form inputs we have (e.g. 2), use that as the new
    // index when inserting a new item (e.g. 2)
    $collectionHolderStage.data('index', $collectionHolderStage.find(':input').length);
    $addStageLink.on('click', function (e) {
        if (validateStageTitle()) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            // add a new tag form (see next code block)
            i++;
            index = addTagForm($collectionHolderStage, $newLinkLiStage, i);
            generalSelect2(
                '#tj_inserate_form_organization_stages_organizationStage_' + index + '_tags_helper',
                trans("organization.stage.new", locale),
                Routing.generate('tj_organization_get_tags', {'_locale': locale}),
                trans("organization.stage.max.is", locale),
                100
            );
        }
    });

    $('ul.stage li').each(function (index) {
        generalSelect2(
            '#tj_inserate_form_organization_stages_organizationStage_' + index + '_tags_helper',
            trans("organization.stage.new", locale),
            Routing.generate('tj_organization_get_tags', {'_locale': locale}),
            trans("organization.stage.max.is", locale),
            100
        );
    });

    const orgaStageForm = $('#organizationStage form');
    addLoadingSvg(orgaStageForm);
    const loading = orgaStageForm.find('.submit-rolling-svg');

    orgaStageForm.submit(function (e) {
        e.preventDefault();
        if (loading.is(':visible')) {
            return;
        }
        var valid = false;
        if ($(this).valid()) {
            loading.show();
            $.ajax({
                type: $(this).attr('method'),
                url: $(this).attr('action'),
                data: new FormData(this),
                processData: false,
                contentType: false,
                success: function (data) {
                    loading.hide();
                    if (data.errors) {
                        for (var key in data.errors) {
                            var el = $('#organizationStage form').find('input[name="' + key + '"]');
                            el.parent().addClass('has-error');
                            toolTipError(data.errors[key], el);
                        }
                    } else {
                        $('.stage-block').html(data.content);
                        $('.logs-block').html(data.logs);
                        valid = true;
                    }
                },
                error: function () {
                    loading.hide();
                    serverError();
                }
            }).done(function () {
                if (valid) {
                    $('#myModal').modal('hide');

                    var grids = $("[data-masonry]");
                    grids.each(function () {
                        $(this).masonry({
                            itemSelector: "[data-masonry-item]"
                        });

                        $(this).masonry("on", "layoutComplete", function () {
                            $("[data-masonry-item] .panel").each(function () {
                                $(this).bleedPanel();
                            });
                        });
                        $(this).masonry();
                    });
                }
            });
        }
    });
    $(function () {
        if (parseInt(stageCount) === 0) {
            $('.add_stage_link').trigger('click');
        }
    });

    $("form[name=tj_inserate_form_organization_stages]").validate({
        errorPlacement: function (error, element) {
            toolTipError(error.text(), element);
            $('.text-danger').removeClass('hidden');
        },
        ignore: [],
        rules: {}
    });

    $.validator.addClassRules(
        "stageSeats", {
            numbersOnly: true
        }
    );

    validFormInputs();
</script>