<?php

namespace Theaterjobs\InserateBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Theaterjobs\AdminBundle\Model\AdminOrganizationSearch;
use Theaterjobs\InserateBundle\Model\UserInterface;

/**
 * OrganizationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganizationRepository extends EntityRepository
{
    /**
     * Get a limited result for the organization entity.
     *
     * @param number $limit amount for limit
     * @param number $offset offset
     *
     * @return Doctrine result
     */
    public function getLimitOffset($limit = 0, $offset = 0)
    {
        $qb = $this->createQueryBuilder('o');

        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function findAllHydrated()
    {
        $qb = $this->createQueryBuilder('o');

        return $qb->getQuery()->getArrayResult();
    }

    public function findAllByUser(UserInterface $user)
    {
        return $this->getQueryBuilderForAllByUser($user)->getQuery()->getResult();
    }

    public function getQueryBuilderForAllByUser(UserInterface $user)
    {
        $qb = $this->createQueryBuilder('o');
        $qb->innerJoin('o.userOrganizations', 'uo');

        $qb->add(
            'where', $qb->expr()->andX(
            $qb->expr()->isNotNull('uo.grantedAt'), $qb->expr()->isNull('uo.revokedAt'), $qb->expr()->isNull('o.destroyedAt'), $qb->expr()->isNull('o.archivedAt'), $qb->expr()->isNull('o.notReachableAt'), $qb->expr()->eq('uo.user', ':user')
        )
        )->setParameter(':user', $user);

        return $qb;
    }

    public function findOneByEmailDomain($domain)
    {
        $qb = $this->createQueryBuilder('o');

        $orga = $qb->innerJoin('o.address', 'oa')
            ->where('oa.url LIKE :url')
            ->orWhere('oa.email LIKE :url')
            ->setParameter('url', '%' . $domain['domain'])
            ->getQuery()
            ->getResult();
        return $orga;
    }

    public function findAllJobsByOrganization($orgaId, $qb)
    {
        $jobs = $qb->select('job')
            ->from('TheaterjobsInserateBundle:Job', 'job')
            ->where('job.organization = :organization')
            ->orderBy('job.publishedAt', 'DESC')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $jobs;
    }

    public function findPublishedJobsByOrganization($orgaId, $em)
    {
        $qb = $em->createQueryBuilder();
        $jobs = $qb->select('job')
            ->from('TheaterjobsInserateBundle:Job', 'job')
            ->where('job.archivedAt IS NULL')
            ->andwhere('job.destroyedAt IS NULL')
            ->andWhere('job.publishedAt IS NOT NULL')
            ->andWhere('job.organization = :organization')
            ->orderBy('job.publishedAt', 'DESC')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $jobs;
    }

    public function findPublishedEducationsByOrganization($orgaId, $em)
    {
        $qb = $em->createQueryBuilder();
        $educations = $qb->select('education')
            ->from('TheaterjobsInserateBundle:Education', 'education')
            ->where('education.archivedAt IS NULL')
            ->andwhere('education.destroyedAt IS NULL')
            ->andWhere('education.publishedAt IS NOT NULL')
            ->andWhere('education.organization = :organization')
            ->orderBy('education.publishedAt', 'DESC')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $educations;
    }

    public function findDraftJobsByOrganization($orgaId, $em)
    {
        $qb = $em->createQueryBuilder();
        $jobs = $qb->select('job')
            ->from('TheaterjobsInserateBundle:Job', 'job')
            ->where('job.archivedAt IS NULL')
            ->andwhere('job.destroyedAt IS NULL')
            ->andWhere('job.publishedAt IS NULL')
            ->andWhere('job.isDraft = true')
            ->andWhere('job.organization = :organization')
            ->orderBy('job.createdAt', 'DESC')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $jobs;
    }

    public function findArchivedJobsByOrganization($orgaId, $em)
    {
        $qb = $em->createQueryBuilder();
        $jobs = $qb->select('job')
            ->from('TheaterjobsInserateBundle:Job', 'job')
            ->where('job.archivedAt IS NOT NULL')
            ->andwhere('job.destroyedAt IS NULL')
            ->andWhere('job.organization = :organization')
            ->orderBy('job.publishedAt', 'DESC')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $jobs;
    }

    public function findDeletedJobsByOrganization($orgaId, $em)
    {
        $qb = $em->createQueryBuilder();
        $jobs = $qb->select('job')
            ->from('TheaterjobsInserateBundle:Job', 'job')
            ->where('job.archivedAt IS NOT NULL')
            ->andwhere('job.destroyedAt IS NOT NULL')
            ->andWhere('job.organization = :organization')
            ->orderBy('job.publishedAt', 'DESC')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $jobs;
    }

    public function findActiveUsers($orgaId)
    {
        $qb = $this->_em->createQueryBuilder();
        $users = $qb->select('users')
            ->from('TheaterjobsUserBundle:UserOrganization', 'users')
            ->where('users.grantedAt IS NOT NULL')
            ->andwhere('users.revokedAt IS NULL')
            ->andWhere('users.organization = :organization')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $users;
    }

    public function findFormerMember($orgaId, $user)
    {
        $qb = $this->_em->createQueryBuilder();
        $formerTeamMember = $qb->select('users')
            ->from('TheaterjobsUserBundle:UserOrganization', 'users')
            ->where('users.revokedAt IS NOT NULL')
            ->andWhere('users.organization = :organization')
            ->andWhere('users.user = :user')
            ->setParameters(['organization' => $orgaId, 'user' => $user])
            ->getQuery()
            ->getResult();
        return $formerTeamMember;
    }

    public function findLikeNameJobs($orgaName)
    {
        $qb = $this->createQueryBuilder('o');
        $organizations = $qb->select('o')
            ->where($qb->expr()->like('o.name', ':orgaName'))
            ->andWhere($qb->expr()->eq('o.isVisibleInList', true))
            ->andWhere($qb->expr()->eq('o.status', 2))
            ->setParameter('orgaName', '%' . $orgaName . '%')
            ->getQuery();

        return $organizations;
    }

    public function findLikeNameProduction($orgaName)
    {
        $qb = $this->createQueryBuilder('o');
        $organizations = $qb->select('o')
            ->where($qb->expr()->like('o.name', ':orgaName'))
            ->andWhere($qb->expr()->eq('o.isVisibleInList', true))
            ->andWhere($qb->expr()->in('o.status', [2, 3, 4]))
            ->setParameter('orgaName', '%' . $orgaName . '%')
            ->getQuery();

        return $organizations;
    }

    public function findLikeNameExperience($orgaName)
    {
        $qb = $this->createQueryBuilder('o');
        $organizations = $qb->select('o')
            ->where($qb->expr()->like('o.name', ':orgaName'))
            ->andWhere($qb->expr()->orX(
                $qb->expr()->in('o.status', [2, 4]),
                $qb->expr()->andX(
                    $qb->expr()->eq('o.isVisibleInList', true), $qb->expr()->eq('o.status', 3)
                )
            ))
            ->setParameter('orgaName', '%' . $orgaName . '%')
            ->getQuery();

        return $organizations;
    }

    public function findBannedUsers($orgaId, $em)
    {
        $qb = $em->createQueryBuilder();
        $users = $qb->select('users')
            ->from('TheaterjobsUserBundle:UserOrganization', 'users')
            ->where('users.revokedAt IS NOT NULL')
            ->andWhere('users.organization = :organization')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $users;
    }

    public function findOrgaActivity($orga, $qb)
    {
        $class = addslashes(get_class($orga));
        $activity = $qb->select('activity')
            ->from('TheaterjobsUserBundle:UserActivity', 'activity')
            ->where('activity.entityId= :news_id')
            ->andWhere('activity.entityClass LIKE :class')
            ->setParameters(array('news_id' => $orga->getId(), 'class' => '%' . $class))
            ->orderBy('activity.createdAt', 'DESC')
            ->getQuery()->getResult();

        return $activity;
    }

    public function findOrgaJobActivity($jobs, $qb)
    {
        $jobsAlias = $jobs;
        if (!empty($jobs)) {
            $class = addslashes(get_class(array_pop($jobsAlias)));
        }
        $jobs_id = [];
        foreach ($jobs as $job) {
            $jobs_id[] = $job->getId();
        }
        $activity = $qb->select('activity')
            ->from('TheaterjobsUserBundle:UserActivity', 'activity')
            ->where($qb->expr()->in('activity.entityId', ':jobs_id'))
            ->andWhere('activity.entityClass LIKE :class')
            ->setParameters(array('jobs_id' => $jobs_id, 'class' => '%' . $class))
            ->orderBy('activity.createdAt', 'DESC')
            ->getQuery()->getResult();

        return $activity;
    }

    public function hasOrg($user)
    {
        $hasOrg = false;
        $qb = $this->createQueryBuilder('o');
        $qb->innerJoin('o.userOrganizations', 'uo');

        $qb->add(
            'where', $qb->expr()->andX(
            $qb->expr()->isNotNull('uo.grantedAt'), $qb->expr()->isNull('uo.revokedAt'), $qb->expr()->eq('uo.user', ':user')
        )
        )->setParameter(':user', $user);
        $userOrg = count($qb->getQuery()->getResult());
        if ($userOrg > 0)
            $hasOrg = true;
        return $hasOrg;
    }

    public function findPendingUsers($orgaId, $em)
    {
        $qb = $em->createQueryBuilder();
        $users = $qb->select('users')
            ->from('TheaterjobsUserBundle:UserOrganization', 'users')
            ->where('users.revokedAt IS NULL')
            ->andWhere('users.grantedAt IS NULL')
            ->andWhere('users.organization = :organization')
            ->setParameter('organization', $orgaId)
            ->getQuery()
            ->getResult();
        return $users;
    }

    public function findPendingUserForAllOrga()
    {
        $qb = $this->createQueryBuilder('o');
        $entity = $qb->select('o.name', 'o.slug', 'p.firstName', 'p.lastName', 'p.slug AS profile_slug', 'p.profileName', 'p.subtitle')
            ->innerJoin('o.userOrganizations', 'uo')
            ->innerJoin('uo.user', 'u')
            ->innerJoin('u.profile', 'p')
            ->where('uo.grantedAt IS NULL')
            ->andWhere('o.destroyedAt IS NULL')
            ->andWhere('o.archivedAt IS NULL')
            ->andWhere('o.notReachableAt IS NULL')
            ->andWhere('uo.revokedAt IS NULL')
            ->getQuery()->getResult();
        return $entity;
    }

    public function findUserOrganizations($user)
    {
        $qb = $this->createQueryBuilder('o');
        $qb->select('o.id');
        $qb->innerJoin('o.userOrganizations', 'uo');
        $orga = $qb->where('uo.grantedAt IS NOT NULL')
            ->andWhere('uo.revokedAt IS NULL')
            ->andWhere('uo.user= :user')
            ->andWhere('o.destroyedAt IS NULL')
            ->andWhere('o.archivedAt IS NULL')
            ->andWhere('o.notReachableAt IS NULL')
            ->setParameter('user', $user)
            ->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        $orgaIds = [];
        foreach ($orga as $organization)
            $orgaIds[] = $organization["id"];
        return $orgaIds;
    }

    public function orgaRequestsNotification($user)
    {
        $qb = $this->createQueryBuilder('o');
        $entity = $qb->select('o.name', 'o.slug', 'p.firstName', 'p.lastName', 'p.slug AS profile_slug', 'p.profileName', 'p.subtitle')
            ->innerJoin('o.userOrganizations', 'uo')
            ->innerJoin('uo.user', 'u')
            ->innerJoin('u.profile', 'p')
            ->where('uo.grantedAt IS NULL')
            ->andWhere('uo.revokedAt IS NULL')
            ->andWhere('o.destroyedAt IS NULL')
            ->andWhere('o.archivedAt IS NULL')
            ->andWhere('o.notReachableAt IS NULL')
            ->andWhere('uo.organization IN(:organizations)')
            ->setParameter('organizations', array_values($this->findUserOrganizations($user)))
            ->getQuery()->getResult();
        return $entity;
    }

    public function findPendingRequestsByUser($user)
    {
        $qb = $this->createQueryBuilder('o');
        $pendingOrga = $qb->select('o.name', 'o.slug')
            ->innerJoin('o.userOrganizations', 'uo')
            ->where('uo.user = :user')
            ->andWhere('uo.grantedAt IS NULL')
            ->andWhere('uo.revokedAt IS NULL')
            ->andWhere('o.destroyedAt IS NULL')
            ->andWhere('o.archivedAt IS NULL')
            ->andWhere('o.notReachableAt IS NULL')
            ->setParameter('user', $user)
            ->getQuery()->getResult();
        return $pendingOrga;
    }

    public function isOrgaInPending($orga, $user)
    {
        $qb = $this->createQueryBuilder('o');
        $pendingOrga = $qb->select('o.id')
            ->innerJoin('o.userOrganizations', 'uo')
            ->where('uo.user = :user')
            ->andWhere('uo.organization = :organization')
            ->andWhere('uo.grantedAt IS NULL')
            ->andWhere('uo.revokedAt IS NULL')
            ->andWhere('o.destroyedAt IS NULL')
            ->andWhere('o.archivedAt IS NULL')
            ->andWhere('o.notReachableAt IS NULL')
            ->setParameters(array('user' => $user, 'organization' => $orga))
            ->getQuery()->getResult();
        if (count($pendingOrga) > 0)
            return true;
        else
            return false;
    }

    public function findMyOrganizations($user)
    {
        $qb = $this->createQueryBuilder('o');
        $orgas = $qb->innerJoin('o.userOrganizations', 'uo')
            ->where('uo.user = :user')
            ->andWhere('uo.grantedAt IS NOT NULL')
            ->andWhere('uo.revokedAt IS NULL')
            ->andWhere('o.destroyedAt IS NULL')
            ->andWhere('o.archivedAt IS NULL')
            ->andWhere('o.notReachableAt IS NULL')
            ->setParameters(array('user' => $user))
            ->getQuery()->getResult();
        return $orgas;
    }

    public function tagSuggest($word, $qb)
    {
        $tags = $qb->select('tags')
            ->from('TheaterjobsNewsBundle:Tags', 'tags')
            ->where('tags.title LIKE :word')
            ->setParameter('word', '%' . $word . '%')
            ->getQuery()->getResult();
        return $tags;
    }

    public function allOrga()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $orga = $qb->select('COUNT(o.id)')
            ->from('TheaterjobsInserateBundle:Organization', 'o')
            ->getQuery()->getResult();
        return $orga;
    }

    public function createOrganizationQuery($params)
    {
        $qb = $this->createQueryBuilder("o");
        $str = [];
        $str[] = 'o.slug';
        foreach ($params->get('fields_to_show') as $param) {
            if ($param != 'views' && $param != 'orgaStatus' && $param != 'members')
                $str[] = 'o.' . $param;
            else {
                if ($param == 'views' && count($params->get('fields_to_search')) && in_array("views", $params->get('fields_to_search')))
                    $str[] = 'COUNT(v.id) AS Views';
                if ($param == 'members' && count($params->get('fields_to_search')) && in_array("members", $params->get('fields_to_search')))
                    $str[] = 'COUNT(uo.id) AS Members';
            }
        }

        $qb->select($str);
        $parameters = [];

        if ($params->get('fields_to_search') !== null) {
            foreach ($params->get('fields_to_search') as $param) {
                if ($param == "createdAt") {
                    $qb->andWhere("o." . $param . ' >= :startDate');
                    $qb->andWhere("o." . $param . ' <= :endDate');
                } elseif ($param == 'orgaStatus') {
                    if ($params->get($param) == "active") {
                        $qb->andWhere('o.notReachableAt IS NULL')
                            ->andWhere('o.destroyedAt IS NULL')
                            ->andWhere('o.archivedAt IS NULL');
                    }
                    if ($params->get($param) == "notReachable") {
                        $qb->andWhere('o.notReachableAt IS NOT NULL')
                            ->andWhere('o.destroyedAt IS NULL')
                            ->andWhere('o.archivedAt IS NULL');
                    }
                    if ($params->get($param) == "closed") {
                        $qb->andWhere('o.notReachableAt IS NULL')
                            ->andWhere('o.destroyedAt IS NOT NULL')
                            ->andWhere('o.archivedAt IS NULL');
                    }
                } elseif ($param == 'views') {
                    $qb->innerJoin('TheaterjobsStatsBundle:View', 'v', \Doctrine\ORM\Query\Expr\Join::WITH, 'o.id = v.foreignKey');
                    $qb->andWhere("v.createdAt" . ' >= :viewsFrom');
                    $qb->andWhere("v.createdAt" . ' <= :viewsTo');
                    $qb->andWhere("v.objectClass LIKE :class");
                    $parameters['class'] = '%Organization%';
                    $qb->addGroupBy('v.foreignKey');

                    if ($params->get('viewsFrom') != '') {
                        $date = new \DateTime($params->get('viewsFrom'));
                        $parameters['viewsFrom'] = $date->format('Y-m-d H:i:s');
                    } else {
                        $date = new \DateTime();
                        $parameters['viewsFrom'] = $date->format('Y-m-d H:i:s');
                    }
                    if ($params->get('viewsTo') != '') {
                        $date = new \DateTime($params->get('viewsTo'));
                        $date->modify('+1 day');
                        $parameters['viewsTo'] = $date->format('Y-m-d H:i:s');
                    } else {
                        $date = new \DateTime();
                        $date->modify('+1 day');
                        $parameters['viewsTo'] = $date->format('Y-m-d H:i:s');
                    }
                } elseif ($param == 'members') {
                    $qb->innerJoin('o.userOrganizations', 'uo')
                        ->having('COUNT(uo.id)>= :membersFrom')
                        ->andHaving('COUNT(uo.id)<= :membersTo');
                    $qb->addGroupBy('uo.organization');
                    if ($params->get('membersFrom') != '') {
                        $parameters['membersFrom'] = intval($params->get('membersFrom'));
                    } else {
                        $parameters['membersFrom'] = 0;
                    }

                    if ($params->get('membersTo') != '') {
                        $parameters['membersTo'] = intval($params->get('membersTo'));
                    } else {
                        $parameters['membersTo'] = 100000;
                    }
                } elseif ($param == "updatedAt") {
                    $qb->andWhere("o." . $param . ' >= :updatedAtFrom');
                    $qb->andWhere("o." . $param . ' <= :updatedAtTo');
                } else {
                    $qb->andWhere('o.' . $param . ' LIKE :' . $param);
                }

                if ($param != "updatedAt" && $param != "createdAt" && $param != 'orgaStatus' && $param != 'members' && $param != 'views') {
                    $parameters[$param] = '%' . $params->get($param) . '%';
                } else {
                    if ($param == 'createdAt') {
                        if ($params->get('createdAtFrom') != '') {
                            $date = new \DateTime($params->get('createdAtFrom'));
                            $parameters['startDate'] = $date->format('Y-m-d H:i:s');
                        } else {
                            $parameters['startDate'] = '';
                        }
                        if ($params->get('createdAtTo') != '') {
                            $date = new \DateTime($params->get('createdAtTo'));
                            $date->modify('+1 day');
                            $parameters['endDate'] = $date->format('Y-m-d H:i:s');
                        } else {
                            $date = new \DateTime();
                            $date->modify('+1 day');
                            $parameters['endDate'] = $date->format('Y-m-d H:i:s');
                        }
                    }
                    if ($param == 'updatedAt') {
                        if ($params->get('updatedAtFrom') != '') {
                            $date = new \DateTime($params->get('updatedAtFrom'));
                            $parameters['updatedAtFrom'] = $date->format('Y-m-d H:i:s');
                        } else {
                            $parameters['updatedAtFrom'] = '';
                        }
                        if ($params->get('updatedAtTo') != '') {
                            $date = new \DateTime($params->get('updatedAtTo'));
                            $date->modify('+1 day');
                            $parameters['updatedAtTo'] = $date->format('Y-m-d H:i:s');
                        } else {
                            $date = new \DateTime();
                            $date->modify('+1 day');
                            $parameters['updatedAtTo'] = $date->format('Y-m-d H:i:s');
                        }
                    }
                }
            }
            $qb->setParameters($parameters);
        }

        $entities = $qb->getQuery()->getResult();
        if (count($entities) === 1 && $entities[0]['slug'] === null)
            unset($entities[0]);
        return $entities;
    }

    public function getOrgaByCategory($user)
    {
        $orga = $this->getEntityManager()->createQueryBuilder()->select('orga.id')
            ->from('TheaterjobsUserBundle:UserOrganization', 'organization')
            ->innerJoin('organization.organization', 'orga')
            ->where('organization.grantedAt is NOT NULL')
            ->andWhere('organization.revokedAt is NULL')
            ->andWhere('organization.user= :user')
            ->setParameter('user', $user);
        return $orga->getQuery()->getResult();
    }

    /**
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countPendingOrganizations()
    {
        $qb = $this->createQueryBuilder('o');

        $qb->select('COUNT(o.id)')
            ->where('o.status = :status')
            ->setParameter('status', 1);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function adminListPendingOrganizationSearch(AdminOrganizationSearch $formSearch)
    {
        $qb = $this->createQueryBuilder('o');
        $qb->innerJoin('o.user', 'u')
            ->innerJoin('u.profile', 'p')
            ->select(
                'o.createdAt as createdAt, 
                        o.slug as slug,
                        o.name as name,
                        u.email as email,
                        p.slug as profileSlug')
            ->where('o.status = :status')
            ->setParameter('status', 1);

        if ($formSearch->getOrderCol()) {
            $qb->orderBy(sprintf("%s", $formSearch->getOrderCol()), $formSearch->getOrder());
        }

        return $qb->getQuery();
    }

    public function getNrPendingOrganizations()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $requests = $qb->select('count(o) as total')
            ->from('TheaterjobsInserateBundle:Organization', 'o')
            ->where('o.status = 1')
            ->getQuery()->getResult();
        return $requests[0]['total'];
    }


    /**
     * @param $organizationId
     * @return mixed
     */
    public function getOrganizationJobIds($organizationId)
    {
        $query = $this->_em->createQuery('
            SELECT
                jobs.id as id
            FROM
                Theaterjobs\InserateBundle\Entity\Job jobs
            LEFT JOIN
                jobs.organization organization
            WHERE organization.id = :organizationId')->setParameter('organizationId', $organizationId);

        $result = $query->getResult();
        return array_reduce($result, function($acc, $item) {
            $acc[] = $item['id'];
            return $acc;
        }, []);
    }
}
