<?php

namespace Theaterjobs\InserateBundle\Entity;

use Theaterjobs\AdminBundle\Model\AdminTeamMembershipSearch;
use Theaterjobs\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * TeamMembershipApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeamMembershipApplicationRepository extends EntityRepository
{

    /**
     * @param User $user
     * @param Organization $organization
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function checkIfHasUnapprovedApplications(User $user = null, Organization $organization)
    {
        if (!$user) {
            return false;
        }

        $qb = $this->createQueryBuilder('tma')
            ->select('count(tma.id)')
            ->where('tma.user = :user ')
            ->andwhere("tma.organization = :organization")
            ->andwhere("tma.pending = true")
            ->andwhere("tma.deleted = false")
            ->setParameters(
                [
                    'user' => $user->getId(),
                    'organization' => $organization->getId()
                ]
            );

        return $qb->getQuery()->getSingleScalarResult() > 0;
    }

    /**
     * @return mixed
     */
    public function getAllTeamMembershipApplications()
    {

        $result = $this->_em->createQueryBuilder()
            ->select('a')
            ->from('TheaterjobsInserateBundle:TeamMembershipApplication', 'a')
            ->where("a.deleted = false")
            ->andwhere("a.pending = true")->getQuery()->getResult();

        return $result;
    }


    /**
     * @param AdminTeamMembershipSearch $formSearch
     * @return mixed
     */
    public function adminListTeamMembershipApplications(AdminTeamMembershipSearch $formSearch)
    {

        $qb = $this->createQueryBuilder('tm');
        $qb->innerJoin('tm.user', 'u')
            ->innerJoin('tm.organization', 'o')
            ->innerJoin('u.profile', 'p')
            ->select(
                'tm.id as id,
                        tm.pending as pending,
                        tm.createdAt as createdAt,
                        o.slug as organizationSlug,
                        o.name as organization,
                        CONCAT(p.firstName, \' \', p.lastName) as user,
                        p.slug as profileSlug
                '
            )
            ->where("tm.deleted = :deleted")
            ->andwhere("tm.pending = :pending")
            ->setParameters(
                [
                    'deleted' => 0,
                    'pending' => 1,
                ]
            );

        if ($formSearch->getOrderCol()) {
            $qb->orderBy(sprintf("%s", $formSearch->getOrderCol()), $formSearch->getOrder());
        }


        return $qb->getQuery();
    }


}
