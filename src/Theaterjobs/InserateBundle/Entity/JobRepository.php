<?php

namespace Theaterjobs\InserateBundle\Entity;

use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\Query;
use Carbon\Carbon;
use Theaterjobs\AdminBundle\Model\JobListSearch;
use Theaterjobs\AdminBundle\Model\JobRequestSearch;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends InserateRepository
{

    public function jobsFromOthers()
    {
        $jobs = $this->createQueryBuilder('j')
            ->where('j.jobFromOtherSite = :param')
            ->setParameter('param', true)
            ->getQuery()->getResult();
        return $jobs;
    }

    /**
     * Find all edited Jobs
     *
     * @TODO remove Magic 1
     * @return type
     */
    public function findEdited()
    {

        $jobs = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('j')
            ->from('TheaterjobsInserateBundle:Job', 'j')
            ->innerJoin('TheaterjobsAdminBundle:AdminLog', 'a')
            ->where('j.id = a.object')
            ->andwhere("a.action = 'job_edit'")
            ->andwhere('j.organization is not NULL')
            ->andwhere('j.archivedAt IS NULL')
            ->andwhere('j.destroyedAt IS NULL')
            ->andWhere('j.organization != 1')
            ->getQuery()->getResult();

        return $jobs;
    }

    public function getQueryForPublishedByCategory(\Theaterjobs\InserateBundle\Model\CategoryInterface $category = null, $occupation = 0, $gratification = 0, $organization = 0)
    {
        $qb = $this->createQueryBuilder('i');
        $qb->add(
            'where', $qb->expr()->andX(
            $qb->expr()->isNull('i.archivedAt'), $qb->expr()->isNull('i.destroyedAt'), $qb->expr()->isNotNull('i.publishedAt')
        )
        );

        if ($category) {
            $qb->innerJoin('i.categories', 'c', Expr\Join::WITH, $qb->expr()->eq('c.id', ':catid'))
                ->setParameter(':catid', $category->getId());
        }
        if ($occupation != 0) {
            $qb->andWhere('i.occupation = ' . $occupation);
        }
        if ($gratification != 0) {
            $qb->andWhere('i.gratification = ' . $gratification);
        }
        if ($organization != 0) {
            $qb->andWhere('i.organization = ' . $organization);
        }
        $qb->orderBy('i.publishedAt', 'DESC');
        return $qb->getQuery();
    }

    public function adminListSearch(JobListSearch $adminJobListSearch)
    {
        $qb = $this->createQueryBuilder('j');
        $qb->innerJoin('j.user', 'u');
        $qb->innerJoin('u.profile', 'p');
        $qb->leftJoin('j.organization', 'o');
        $qb->select(
            'j.status as status, 
                    j.title as title,
                    j.slug as slug,
                    o.slug as organizationSlug, 
                    o.name as organization,
                    j.createdAt as createdAt, 
                    CONCAT(p.firstName, \' \', p.lastName) as user,
                    p.slug as profileSlug');

        $qb->where('j.watchList = :watchList')
            ->setParameter('watchList', 1);

        if ($adminJobListSearch->getOrderCol()) {
            $qb->orderBy(sprintf("%s", $adminJobListSearch->getOrderCol()), $adminJobListSearch->getOrder());
        }
        return $qb->getQuery();
    }

    public function toBeCheckedByAdmin()
    {
        $qb = $this->createQueryBuilder('j');
        $jobs = $qb
            ->orWhere('j.status = 1')// status published
            ->orWhere('j.status = 5')// status pending
            ->andwhere('j.firstCheck IS NULL')
            ->andwhere('j.archivedAt IS NULL')
            ->andwhere('j.destroyedAt IS NULL')
            ->orderBy('j.publishedAt', 'DESC')
            ->getQuery();//->getResult();

        return $jobs;
    }

    public function findPublishedJobsByUserOrganization($user, $organization)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $jobs = $qb->select('job')
            ->from('TheaterjobsInserateBundle:Job', 'job')
            ->where('job.archivedAt IS NULL')
            ->andwhere('job.destroyedAt IS NULL')
            ->andWhere('job.publishedAt IS NOT NULL')
            ->andWhere('job.user = :user')
            ->andWhere('job.organization= :organization')
            ->orderBy('job.publishedAt', 'DESC')
            ->setParameters(array('user' => $user, 'organization' => $organization))
            ->getQuery()
            ->getResult();
        return $jobs;
    }

    public function createJobQuery($form)
    {

        $searchData = $form->getData();
        $qb = $this->getEntityManager()->createQueryBuilder();

        $params = [];
        if ($searchData['dateFrom'] != $searchData['dateTo']) {
            $qb->select('SUBSTRING(j.createdAt, 1, 10) as dt,COUNT(j) as num');
        } else {
            $qb->select('SUBSTRING(j.createdAt, 1, 19) as dt,COUNT(j) as num');
        }
        $qb->from('TheaterjobsInserateBundle:Job', 'j');
        if ($searchData['users']) {
            if ($searchData['users'] == "admins") {
                $qb->innerJoin('j.user', 'u')
                    ->where('u.roles LIKE :role');
                $params['role'] = "%ROLE_ADMIN%";
            }
            if ($searchData['users'] == "others") {
                $qb->innerJoin('j.user', 'u')
                    ->where('u.roles NOT LIKE :role');
                $params['role'] = "%ROLE_ADMIN%";
            }
        }
        if ($searchData['status']) {
            if ($searchData['status'] == 'published') {
                $qb->andWhere('j.archivedAt IS NULL')
                    ->andWhere('j.destroyedAt IS NULL');
            }
            if ($searchData['status'] == 'archived') {
                $qb->andWhere('j.archivedAt IS NOT NULL OR j.destroyedAt IS NOT NULL');
            }
        }
        if ($searchData['dateFrom']) {
            $qb->andWhere('j.createdAt >= :startDate');
            $params['startDate'] = new \DateTime($searchData['dateFrom']);
        }
        if ($searchData['dateTo']) {
            $qb->andWhere('j.createdAt < :endDate');
            $date = new \DateTime($searchData['dateTo']);
            $date->modify('+1 day');
            $params['endDate'] = $date;
        }

        $qb->groupBy('dt');
        $qb->setParameters($params);

        $jobs = $qb->getQuery()->getResult();
        return $jobs;
    }

    /**
     * Get all unseen expire jobs
     * @param $endDate
     * @return array
     */
    public function getUnseenExpireJobs($endDate)
    {
        $query = $this->createQueryBuilder('i')
            ->where("i.publicationEnd < :endDate")
            ->andWhere("i.seen <> 1")
            ->andWhere('i.publishedAt is not NULL')
            ->andWhere('i.archivedAt is NULL')
            ->setParameters(array('endDate' => $endDate))
            ->getQuery();
        return $query->getResult();
    }

    /**
     * Update expired jobs
     *
     * @param $endDate
     */
    public function updateExpireJobs($endDate)
    {
        $query = $this->createQueryBuilder('i');
        $query->update('TheaterjobsInserateBundle:Inserate', 'i')
            ->set('i.seen', '1')
            ->where("i.publicationEnd < :endDate")
            ->andWhere('i.seen = 0')
            ->andWhere('i.publishedAt is not NULL')
            ->andWhere('i.archivedAt is NULL')
            ->setParameter('endDate', $endDate)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $jobIds
     * @param $employmentDate
     */
    public function archiveExpiredJobs(array $jobIds, $employmentDate)
    {
        if (!$jobIds) return;

        $qb = $this->createQueryBuilder('j');
        $qb->update()
            ->set('j.archivedAt', '?0')
            ->set('j.employmentDate', '?1')
            ->set('j.employmentStatus', Job::EMPLOYMENT_STATUS_AWAITING_ANSWER)
            ->set('j.status', Job::EMPLOYMENT_STATUS_FAILED)
            ->where($qb->expr()->in('j.id', $jobIds))
            ->setParameter('0', Carbon::now())
            ->setParameter('1', $employmentDate)
            ->getQuery()
            ->getResult();
    }

    /**
     * Find published jobs that their publication period has ended
     * @param $publicationEndDate
     * @return array
     */
    public function expiredPublishedJobs($publicationEndDate)
    {
        $query = $this->createQueryBuilder('j');
        return $query->where('j.archivedAt is null ')
            ->andWhere('j.publicationEnd < :pubDate')
            ->setParameter('pubDate', $publicationEndDate)
            ->getQuery()->getResult();
    }


    public function jobsForViewStatsCleanupIds()
    {
        $qb = $this->createQueryBuilder('j');

        $query = $qb->select('j.id as id')
            ->where('j.archivedAt is null ')
            ->andWhere('j.publishedAt is not NULL')
            ->andWhere('j.archivedAt is NULL')
            ->andwhere('j.destroyedAt IS NULL')
            ->getQuery();

        $result = $query->getResult();
        return array_reduce($result, function ($acc, $item) {
            $acc[] = $item['id'];
            return $acc;
        }, []);
    }


    /**
     * @param JobRequestSearch $formSearch
     *
     * @return \Doctrine\ORM\Query
     */
    public function adminPendingJobRequests(JobRequestSearch $formSearch)
    {
        $qb = $this->createQueryBuilder('j');
        $qb->leftJoin('j.user', 'u')
            ->leftJoin('u.profile', 'p')
            ->leftJoin('j.organization', 'o')
            ->select('j.title as title,
                    j.status as status,
                    j.requestedPublicationAt as requestedPublicationAt,
                    j.slug as slug,
                    o.slug as organizationSlug, 
                    o.status as organizationStatus, 
                    o.name as organization,
                    j.publishedAt as publishedAt, 
                    CONCAT(p.firstName, \' \', p.lastName) as user,
                    p.slug as profileSlug'
            );

        switch ($formSearch->getStatus()) {
            case 'new':
                $qb->where(
                    $qb->expr()->andX(
                        $qb->expr()->eq('j.status', '1'),
                        $qb->expr()->eq('j.newlyPublishedJob', '1')
                    )
                );
                break;
            case 'email':
                $qb->where(
                    $qb->expr()->andX(
                        $qb->expr()->eq('j.status', 5),
                        $qb->expr()->eq('j.pendingAction', 3)
                    )
                );
                break;
            case 'admin':
                $qb->where(
                    $qb->expr()->andX(
                        $qb->expr()->eq('j.status', 5),
                        $qb->expr()->eq('j.pendingAction', 1)
                    )
                );
                break;
        }

        if ($formSearch->getOrderCol()) {
            $qb->orderBy(sprintf("%s", $formSearch->getOrderCol()), $formSearch->getOrder());
        }


        return $qb->getQuery();
    }


    /**
     * @param int $daysAgo Filter the results for certain number of days before today.
     *
     * @return array
     */
    public function getPendingEmailConfirmationJobsForNotify($daysAgo = 0)
    {
        $now = Carbon::now();
        $beforeDate = $now->subDays($daysAgo);
        $beforeDate = new \DateTime($beforeDate->format("Y-m-d") . "23:59:59");


        $qb = $this->createQueryBuilder('j');
        $qb->leftJoin('j.user', 'u')
            ->leftJoin('j.organization', 'o')
            ->select('j.slug as slug,
                o.slug as organizationSlug, 
                u.id as user'

            );
        $qb->where($qb->expr()->andX($qb->expr()->eq('j.status', 5), $qb->expr()->eq('j.pendingAction', 3)));
        $qb->andWhere('j.requestedPublicationAt <= :daysAgo')->setParameter('daysAgo', $beforeDate);

        return $qb->getQuery()->getResult();
    }

    /**
     *
     * @param $organization int
     * @return array
     */
    public function getRequestsTeamMembers($organization)
    {
        $qb = $this->createQueryBuilder('j');

        $qb->where('j.status = :status')
            ->andWhere('j.pendingAction = :pendingAction')
            ->andWhere($qb->expr()->in('j.organization', $organization))
            ->setParameters(
                [
                    'status' => Job::STATUS_PENDING,
                    'pendingAction' => Job::STATUS_DRAFT
                ]
            );

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $userId
     * @return mixed
     */
    public function getUserJobIds($userId)
    {
        $query = $this->_em->createQuery('
            SELECT
                jobs.id as id
            FROM
                Theaterjobs\InserateBundle\Entity\Job jobs
            LEFT JOIN
                jobs.user user
            WHERE user.id = :userId')->setParameter('userId', $userId);

        $result = $query->getResult();
        return array_reduce($result, function ($acc, $item) {
            $acc[] = $item['id'];
            return $acc;
        }, []);
    }
}
