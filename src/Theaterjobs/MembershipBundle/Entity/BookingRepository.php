<?php

namespace Theaterjobs\MembershipBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Theaterjobs\ProfileBundle\Entity\Profile;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends EntityRepository
{
    /**
     * @param $profile
     * @return null | Paymentmethod
     */
    public function paymentMethodByProfile($profile)
    {
        $lastBooking = $this->findOneBy(['profile' => $profile], ['createdAt' => 'DESC']);
        return $lastBooking ? $lastBooking->getPaymentmethod() : null;
    }

    /**
     * Get last Booking of a profile
     * @param $profile
     * @return Booking
     */
    public function lastBooking(Profile $profile)
    {
        $qb = $this->createQueryBuilder('booking');
        $result = $qb->innerJoin('booking.profile', 'profile')
            ->where('profile.id = :id')
            ->orderBy('booking.id', 'DESC')
            ->setParameters(['id' => $profile->getId()])
            ->getQuery()
            ->setMaxResults(1)
            ->getResult();
        return $result ? $result[0] : null;
    }

    /**
     * Count Bookings of a profile
     * @param Profile $profile
     * @return integer
     */
    public function countBooking(Profile $profile)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->select('count(b.id)')
            ->where('b.profile = :profile')
            ->setParameter('profile', $profile);
        try {
            return $qb->getQuery()->getSingleScalarResult();
        } catch (\Exception $e) {
            return 0;
        }
    }

    /**
     * Get users that their membership has expired before given $date and their last booking is paypal/sofort
     * or debit and has contract canceled
     * @param $date
     * @return Booking[]
     */
    public function expiredMembershipBefore($date)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->select('b')
            ->leftJoin('TheaterjobsMembershipBundle:Booking', 'b1', Expr\Join::WITH, 'b.profile = b1.profile and b.createdAt < b1.createdAt')
            ->innerJoin('b.paymentmethod', 'payM')
            ->innerJoin('b.profile', 'p')
            ->innerJoin('p.user', 'u')
            ->where('b1.profile is null')
            ->andWhere('u.membershipExpiresAt < :date')
            ->andWhere('u.roles LIKE :roles')
            ->andWhere($qb->expr()->orX(
                $qb->expr()->andX(
                    $qb->expr()->neq('u.quitContract ', true),
                    $qb->expr()->neq('payM.short', ':payMethod')
                ),
                $qb->expr()->andX(
                    $qb->expr()->eq('u.quitContract ', true),
                    $qb->expr()->eq('payM.short', ':payMethod')
                )
            ))->setParameters([
                'date' => $date,
                'roles' => '%"ROLE_MEMBER"%',
                'payMethod' => Paymentmethod::DIRECT_DEBIT
            ]);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get users that their membership of debit type will end after $date
     * @param $date
     * @return Booking[]
     */
    public function expiredDebitMembershipBefore($date)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->select('b')
            ->leftJoin('TheaterjobsMembershipBundle:Booking', 'b1', Expr\Join::WITH, 'b.profile = b1.profile and b.createdAt < b1.createdAt')
            ->innerJoin('b.paymentmethod', 'payM')
            ->innerJoin('b.profile', 'p')
            ->innerJoin('p.user', 'u')
            ->where('b1.profile is null')
            ->andWhere('u.membershipExpiresAt < :date')
            ->andWhere('u.roles LIKE :roles')
            ->andWhere('u.quitContract = false')
            ->andWhere('payM.short = :payMethod')
            ->setParameters([
                'date' => $date,
                'roles' => '%"ROLE_MEMBER"%',
                'payMethod' => Paymentmethod::DIRECT_DEBIT
            ]);

        return $qb->getQuery()->getResult();
    }
}
