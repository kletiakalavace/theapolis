<?php

namespace Theaterjobs\ProfileBundle\Entity;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Theaterjobs\AdminBundle\Model\DirectorSearch;

/**
 * DirectorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DirectorRepository extends NestedTreeRepository
{
    public function getCheckedDirectors()
    {
        $qb = $this->createQueryBuilder('director');
        $qb->where($qb->expr()->eq('director.checked', ':param'));
        $qb->andWhere($qb->expr()->isNull('director.parent'));
        $qb->setParameter(':param', true);
        $qb->orderBy('director.name', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function getMergedDirectors()
    {
        $qb = $this->createQueryBuilder('director');
        $qb->where($qb->expr()->isNotNull('director.parent'));
        $qb->orderBy('director.name', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function getUnCheckedDirectors()
    {
        $qb = $this->createQueryBuilder('director');
        $qb->where($qb->expr()->eq('director.checked', ':param'));
        $qb->andWhere($qb->expr()->isNull('director.parent'));
        $qb->setParameter(':param', false);
        $qb->orderBy('director.id', 'DESC');
        return $qb->getQuery()->getResult();
    }

    public function directorAutosuggestion($name)
    {
        $qb = $this->createQueryBuilder('d');
        $qb
            ->addSelect("(CASE WHEN d.name like  '%" . $name . "'   THEN 1  WHEN d.name like '" . $name . "%'  THEN 2 ELSE 3 END) AS HIDDEN ordCol")
            ->where('d.name LIKE :name ')
            ->andWhere($qb->expr()->eq('d.checked', ':checked'))
            ->setParameter('name', '%' . $name . '%')
            ->setParameter('checked', true)
            ->orderBy("ordCol");

        return $qb->getQuery();
    }

    public function mergeDirectorQueryBuilder(Director $director)
    {

        $qb = $this->createQueryBuilder('director');
        $qb->Where($qb->expr()->eq('director.checked', ':param'));
        $qb->andWhere($qb->expr()->neq('director.id', $director->getId()));
        $qb->setParameter(':param', true)
            ->orderBy('director.name', 'ASC');

        return $qb;
    }

    public function getSiblingsByRoot($root)
    {
        $qb = $this->createQueryBuilder('node');
        $qb->orderBy('node.root, node.lft', 'ASC')
            ->where($qb->expr()->eq('node.root', ':root'))
            ->setParameter('root', $root)
            ->getQuery();

        return $qb->getQuery()->getResult();
    }

    public function adminListSearch(DirectorSearch $adminCreatorSearch)
    {
        $qb = $this->createQueryBuilder('d');

        if ($adminCreatorSearch->getName()) {
            $qb
                ->where($qb->expr()->like('d.name', ':name'))
                ->setParameter('name', sprintf('%%%s%%', $adminCreatorSearch->getName()));
        }

        if (is_numeric($adminCreatorSearch->getPublished())) {
            $qb
                ->andWhere($qb->expr()->eq('d.checked', ':checked'))
                ->setParameter('checked', $adminCreatorSearch->getPublished());
        }

        if ($adminCreatorSearch->getOrderCol()) {
            $qb->orderBy(sprintf("d.%s", $adminCreatorSearch->getOrderCol()), $adminCreatorSearch->getOrder());
        }

        return $qb->getQuery();
    }

    /**
     * Get ids of productions of a director
     * @param $directorId
     * @return mixed
     */
    public function getDirectorProductionIds($directorId)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->leftJoin('d.productions', 'p')
            ->select('p.id as id')
            ->where('d.id = :id')
            ->setParameter('id', $directorId);

        $result = $qb->getQuery()->getArrayResult();

        return array_reduce($result, function ($acc, $item) {
            if ($item['id'] != null) {
                $acc[] = $item['id'];
            }
            return $acc;
        }, []);
    }
}
