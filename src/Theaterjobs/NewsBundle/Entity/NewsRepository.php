<?php

namespace Theaterjobs\NewsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Carbon\Carbon;

/**
 * EventMemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends EntityRepository
{

    public function findPublishedNews($date)
    {
        $qb = $this->getQueryForPublishedNews();
        $qb->where('news.publishAt <= :date_from')
            ->setParameter('date_from', $date);

        return $qb->getQuery()->getResult();
    }

    public function findPublishedNewsByCategory($date, $category)
    {
        $qb = $this->getQueryForPublishedNews();
        $qb->andwhere('news.category= :category')
            ->andWhere('news.publishAt <= :date_from')
            ->setParameters([
                    'date_from' => $date,
                    'category' => $category
                ]
            );

        return $qb->getQuery()->getResult();
    }

    public function findPublishedNewsByTag($date, $tag)
    {
        $qb = $this->getQueryForPublishedNews();
        $qb->innerJoin('news.tags', 'tags')
            ->andwhere('tags.id= :tag')
            ->andWhere('news.publishAt <= :date_from')
            ->setParameters(array('date_from' => $date, 'tag' => $tag));

        return $qb->getQuery()->getResult();
    }

    public function latestNews($date_from, $currentDate)
    {
        $qb = $this->getQueryForPublishedNews();
        $qb->andwhere('news.publishAt BETWEEN :date_from AND :current_date')
            ->setParameters(array('date_from' => $date_from, 'current_date' => $currentDate));

        return $qb->getQuery()->getResult();
    }

    private function getQueryForPublishedNews()
    {
        $qb = $this->createQueryBuilder('news');
        $qb->where('news.published= true')
            ->andWhere('news.archived=false')
            ->orderBy('news.publishAt', 'DESC');

        return $qb;
    }

    public function populateCategories($newsCatRoot)
    {
        $qb = $this->createQueryBuilder('news');
        $categories = $qb->select('category')
            ->from('TheaterjobsCategoryBundle:Category', 'category')
            ->innerJoin('category.parent', 'p')
            ->where('category.removedAt is NULL')
            ->andWhere('p.slug= :parent')
            ->orderBy('category.title', 'ASC')
            ->setParameter('parent', $newsCatRoot)
            ->getQuery()->getResult();
        return $categories;
    }

    public function getCommentsByNews($news)
    {
        $qb = $this->_em->createQueryBuilder();
        $comments = $qb->select('replies')
            ->from('TheaterjobsNewsBundle:Replies', 'replies')
            ->where('replies.archivedAt is NULL')
            ->andWhere('replies.news= :news')
            ->setParameter('news', $news)
            ->orderBy('replies.checkedAt', 'DESC')
            ->getQuery()->getResult();
        return $comments;
    }


    public function organizationSuggest($word)
    {
        $qb = $this->createQueryBuilder('organiazations');
        $qb->select('o')
            ->from('TheaterjobsInserateBundle:Organization', 'o')
            ->where('o.name LIKE :word')
            ->setParameter('word', '%' . $word . '%');
        return $qb->getQuery()->getResult();
    }

    public function userSuggest($word)
    {
        $qb = $this->createQueryBuilder('users');
        $qb->select('o')
            ->from('TheaterjobsProfileBundle:Profile', 'o')
            ->where('o.firstName LIKE :word')
            ->orWhere('o.lastName LIKE :word')
            ->setParameter('word', '%' . $word . '%');
        return $qb->getQuery()->getResult();
    }


    public function findNewsActivity($news, $qb)
    {
        $class = addslashes(get_class($news));
        $activity = $qb->select('activity')
            ->from('TheaterjobsUserBundle:UserActivity', 'activity')
            ->where('activity.entityId= :news_id')
            ->andWhere('activity.entityClass LIKE :class')
            ->setParameters(array('news_id' => $news->getId(), 'class' => '%' . $class))
            ->orderBy('activity.id', 'DESC')
            ->getQuery()->getResult();

        return $activity;
    }

    public function findTenLatestComments()
    {
        $qb = $this->createQueryBuilder('news');
        $comments = $qb->select('replies.comment', 'news.title', 'news.slug', 'news.id')
            ->from('TheaterjobsNewsBundle:Replies', 'replies')
            ->where('replies.news = news.id')
            ->andWhere('replies.checkedAt IS NOT NULL')
            ->andWhere('replies.checkedBy IS NOT NULL')
            ->andWhere('replies.archivedAt IS NULL')
            ->andWhere('news.publishAt <= :date_from')
            ->andWhere('news.published= true')
            ->andWhere('news.archived=false')
            ->setParameter('date_from', Carbon::now())
            ->orderBy('replies.checkedAt', 'DESC')
            ->setMaxResults(10)
            ->getQuery()->getResult();
        return $comments;
    }

    /*
     * List all news by user
     */

    public function findAllNewsByUser($user)
    {
        $qb = $this->createQueryBuilder('news');
        $news = $qb->innerJoin('news.users', 'users')
            ->where('news.publishAt IS NOT NULL')
            ->andWhere('users.id = :users')
            ->orderBy('news.createdAt', 'DESC')
            ->setParameter('users', $user)
            ->getQuery()
            ->getResult();
        return $news;
    }

    public function findPublishedNewsByOrganization($date, $organization)
    {
        $qb = $this->getQueryForPublishedNews();
        $qb->innerJoin('news.organizations', 'organization')
            ->andWhere('news.publishAt <= :date_from')
            ->andwhere('organization.id= :organization')
            ->setParameters(array('date_from' => $date, 'organization' => $organization));

        return $qb->getQuery()->getResult();
    }

    public function findLatestComments($date, $currDate)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $comments = $qb->select('count(replies.id) as news_replies')
            ->from('TheaterjobsNewsBundle:Replies', 'replies')
            ->innerJoin('replies.news', 'news')
            ->where('replies.checkedAt IS NOT NULL')
            ->andWhere('replies.checkedBy IS NOT NULL')
            ->andWhere('replies.archivedAt IS NULL')
            ->andWhere('replies.date BETWEEN :date_from AND :curr_date')
            ->andWhere('news.published= true')
            ->andWhere('news.archived=false')
            ->setParameters(array('date_from' => $date, 'curr_date' => $currDate))
            ->orderBy('replies.checkedAt', 'DESC')
            ->getQuery()->getResult();
        return $comments;
    }

    public function countNewsDashboard()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $news = $qb->select('COUNT(news.id)')
            ->from('TheaterjobsNewsBundle:News', 'news')
            ->where('news.published != TRUE')
            ->andWhere('news.archived != TRUE')
            ->addGroupBy('news.id')
            ->getQuery()->getResult();

        return $news;
    }

    public function createAdminSearchQuery($params)
    {
        $qb = $this->createQueryBuilder('j');
        $str = [];
        $str[] = 'j.slug';
        $str[] = 'j.id';

        foreach ($params->get('fields_to_show') as $param) {
            $str[] = 'j.' . $param;
        }
        $qb->select($str);
        $parameters = [];
        if ($params->get('fields_to_search') !== null) {
            foreach ($params->get('fields_to_search') as $param) {
                $qb->andWhere('j.' . $param . ' LIKE :' . $param);
                $parameters[$param] = '%' . $params->get($param) . '%';
            }
        }
        $qb->setParameters($parameters);
        $entities = $qb->getQuery()->getResult();
        return $entities;
    }

}
